
4. Answer the following questions:
(a) How many unique users are represented in the dataset? 
(b) How many times did they check-in in total?
(c) How many check-in sessions are there in the dataset? 
(d) How many countries are represented in the dataset?
(e) How many cities are represented in the dataset?

5. Calculate lengths of sessions as number of check-ins and provide a his- togram of these lengths.

6. For sessions with 4 and more check-ins, calculate their distance in kilome- ters (use Haversine formula to compute distance between two pairs of geo. coordinates).

7. Find 100 longest sessions (in terms of check-in counts) that cover distance of at least 50Km.
(a) For these 100 sessions, output data about their check-ins into a CSV or TSV file. Use all available data fields such as checkin_id, ses- sion_id, etc. and also add check-in date in `YYYY-MM-DD HH:MM:SS' format.
(b) Visualize these sessions in CartoDB (more info below).

8. Feel free to explore the data also in other ways. Extensions to the analysis and further insights are welcome!
3
1.2.1 Haversine formula
The Haversine formula3 is used to calculate the distance between two points on a sphere (e.g., the Earth), where the two points are represented by their longitudes a latitudes (in radians).
√
d=2rarcsin( sin2(φ2 −φ1)+cos(φ1)cos(φ2)sin2(λ2 −λ1)) (1) 22
, where d is the calculated distance, r is the radius of sphere (6378Km for the Earth), φ1,φ2 are the latitudes of point 1 and 2 and λ1,λ2 are the longitudes of point 1 and 2.
Implementation in Python:
def haversine(lat1, lon1, lat2, lon2):
# convert decimal degrees to radians
lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    r = 6371 # Radius of earth in kilometers. Use 3956 for miles
    return c * r
1.2.2 Session visualization in CartoDB
CartoDB is an in-browser mapping service, which you can use to visualize check- ins or sessions. How to visualize the check-ins:
1. Create a free account at https://cartodb.com/signup.
2. Upload your results in CSV/TSV format with 1 check-in per line.
3. ‘DATA VIEW’ tab should open once you choose to connect the dataset.
4. Select which of your columns refer to coordinates (lat, lon). If you name your columns ‘lat’/‘lon’, CartoDB will recognize them automatically.
3https://en.wikipedia.org/wiki/Haversine_formula 4

5. Check if column with check-in date was recognized as a date data type, otherwise change the data type.
6. Switch to ‘MAP VIEW’ tab.
7. In the right panel, choose ‘wizard’ and change map type to ‘CATEGORY’; change ‘Column’ drop-down menu to the column in your data that repre- sents category of check-ins.
1.3 Delivery
You should deliver a written report (PDF), short oral presentation and source code of your program. In your report, provide answers to the (sub)tasks and describe which Spark functions you used and why. In the presentation, you should quickly guide us through your code, explain used methods and demon- strate results. It shouldn’t take more than 10 minutes.
